// 给定一个正整数 n ，将其切分为至少两个正整数的和，求切分后所有整数的乘积最大是多少

// 推断
// 1.根据经验，两个非1整数的乘积肯定大于或等于它们的和，所以最大乘积肯定不会有1，所以最小的切分数是2
// 2.当n=2时，肯定存在2*(n-2) >= n, 故 n >= 4, 即大于等于4的数，都需要切, 故切分因子只有2和3
// 3.由于3*3 > 2*2*2, 所以切分因子应该尽量取3
// 故n=3a + b, 其中b=0,1,2
//
/* 最大切分乘积：贪心 */
function maxProductCutting(n) {
  // 当 n <= 3 时，必须切分出一个 1
  if (n <= 3) {
    return 1 * (n - 1)
  }
  // 贪心地切分出 3 ，a 为 3 的个数，b 为余数
  let a = Math.floor(n / 3)
  let b = n % 3
  if (b === 1) {
    // 当余数为 1 时，将一对 1 * 3 转化为 2 * 2，因为 2 * 2 > 1 * 3
    return Math.pow(3, a - 1) * 2 * 2
  }
  if (b === 2) {
    // 当余数为 2 时，不做处理
    return Math.pow(3, a) * 2
  }
  // 当余数为 0 时，不做处理
  return Math.pow(3, a)
}

console.log(maxProductCutting(10)) // 36
